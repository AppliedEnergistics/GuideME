
plugins {
    id 'net.neoforged.moddev'
    id 'maven-publish'
    id 'com.gradleup.shadow'
}

apply plugin: ProjectDefaultsPlugin
apply plugin: FlatBuffersPlugin

group = "appeng"
base {
    archivesName = "guideme"
}

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
    testmod
}

configurations {
    localRuntimeOnly
    shaded {
        transitive = false
    }
    // Dependencies only used for the guide export, but not shipped
    guideExportOnly
    configurations.compileClasspath.extendsFrom(guideExportOnly)
    configurations.runtimeClasspath.extendsFrom(guideExportOnly)

    runtimeClasspath.extendsFrom localRuntimeOnly
}

dependencies {
    // To be copied into the jar file
    shaded project(path: ':markdown', configuration: "archives")
    shaded "io.methvin:directory-watcher:${directory_watcher_version}"
    shaded "org.yaml:snakeyaml:${snakeyaml_version}"
    shaded "com.google.flatbuffers:flatbuffers-java:${flatbuffers_version}"

    api(project(':markdown')) {
        transitive = false
    }
    // Do not inherit any transitive dependencies here since we rely on those transitive dependencies being
    // present in Minecrafts own dependencies already.
    implementation("io.methvin:directory-watcher:${directory_watcher_version}") {
        transitive = false
    }
    implementation("org.yaml:snakeyaml:${snakeyaml_version}") {
        transitive = false
    }
    implementation("com.google.flatbuffers:flatbuffers-java:${flatbuffers_version}") {
        transitive = false
    }
    // Used for the guide export
    guideExportOnly("org.bytedeco:ffmpeg-platform:${ffmpeg_version}")

    // unit test dependencies
    testImplementation(platform("org.junit:junit-bom:${junit_version}"))
    testImplementation(platform("org.assertj:assertj-bom:${assertj_version}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.platform:junit-platform-launcher")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-junit-jupiter:5.12.0")
    testImplementation("net.neoforged:testframework:${neoforge_version}")

    testmodRuntimeOnly sourceSets.main.output
}

///////////////////
// Version Number
ext.tag = System.getenv('TAG') ?: ""
if (ext.tag) {
    if (!ext.tag.startsWith("v")) {
        throw new GradleException("Tags should start with v ${ext.tag}")
    }

    project.version = ext.tag.substring("v".length())
} else {
    // This essentially tries to implement delay expansion of the project version based on a value source to
    // still support configuration caching.
    project.version = providers.gradleProperty("version").orElse("").flatMap(version -> {
        if (!version.isBlank()) {
            return providers.provider { version }
        }
        return providers.of(ProjectVersionSource.class, spec -> {
            spec.getParameters().getDefaultBranches().addAll("main", project.minecraft_version)
        });
    }).get()
}

tasks.register("printProjectVersion", PrintProjectVersion.class);

final testModGuidePath = file('src/testmod/resources/assets/testmod/guides/testmod/guide').absolutePath

test {
    useJUnitPlatform()

    systemProperty 'guideme.testmod.guide.sources', testModGuidePath
}

neoForge {
    enable {
        version = project.neoforge_version
        enabledSourceSets = [sourceSets.main, sourceSets.testmod]
    }

    mods {
        guideme {
            sourceSet sourceSets.main
        }
        testmod {
            sourceSet sourceSets.testmod
        }
        guidemetest {
            sourceSet sourceSets.main
            sourceSet sourceSets.test
        }
    }

    runs {
        configureEach {
            gameDirectory = project.file('run')

            loadedMods = [mods.guideme, mods.testmod]
            sourceSet = sourceSets.testmod

            additionalRuntimeClasspathConfiguration.extendsFrom configurations.shaded
            additionalRuntimeClasspathConfiguration.extendsFrom configurations.guideExportOnly

            systemProperty("guideme.testmod.guide.sources", testModGuidePath)
        }
        client {
            client()
        }
        gametestWorld {
            client()
            programArguments = [
                    "--username", "GuideMEDev", "--quickPlaySingleplayer", "GametestWorld"
            ]
        }
        guide {
            client()
            systemProperty('guideme.showOnStartup', 'testmod:guide')
        }
        data {
            data()
            programArguments = [
                    '--mod', 'guideme',
                    '--all',
                    '--output', file('src/generated/resources/').absolutePath,
                    '--existing', file('src/main/resources').absolutePath
            ]
        }
        // Use to run the tests
        gametest {
            type = "gameTestServer"
            gameDirectory = project.file("build/gametest")
        }
    }

    unitTest {
        enable()
        testedMod = mods.guidemetest
    }
}

//////////////
// Artifacts
Map<String, String> expansionVariables = [
        'project_version': project.version,
        'minecraft_version': project.minecraft_version_range,
        'neoforge_version': project.neoforge_version_range,
]

processResources {
    // Ensure the resources get re-evaluate when the version changes
    for (var entry : expansionVariables.entrySet()) {
        inputs.property(entry.key, entry.value)
    }

    filesMatching("META-INF/neoforge.mods.toml") {
        expand expansionVariables
        filter { line ->
            line.replace('version="0.0.0"', "version=\"${expansionVariables['project_version']}\"")
        }
    }
}

jar {
    finalizedBy shadowJar
    archiveClassifier = "plain"
}

shadowJar {
    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    relocate "io.methvin", "guideme.shaded.methvin"
    relocate "org.yaml.snakeyaml", "guideme.shaded.snakeyaml"
    relocate "com.google.flatbuffers", "guideme.shaded.flatbuffers"

    configurations = [project.configurations.shaded]
    archiveClassifier = ""
}

assemble.dependsOn shadowJar

def publicApiIncludePatterns = {
    exclude "**/*Internal.*"
    exclude "**/*Internal\$*.*"
    exclude "**/internal/**"
}

javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output

    options.addStringOption('Xdoclint:none', '-quiet')
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}
javadoc publicApiIncludePatterns

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

tasks.register('apiJar', Jar) {
    archiveClassifier = "api"
    // api jar ist just a development aid and serves as both a binary and source jar simultaneously
    from sourceSets.main.output
    from sourceSets.main.allJava
    include "**/*.class"
}
apiJar publicApiIncludePatterns

artifacts {
    archives javadocJar
    archives sourcesJar
    archives apiJar
}

//////////////////
// Maven publish
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "guideme"
            version = project.version

            artifact shadowJar
            artifact sourcesJar
            artifact javadocJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            name = "Local"
            url = file("build/repo").toURI()
        }
    }
}

afterEvaluate {
    println('Version: ' + project.version)
}
