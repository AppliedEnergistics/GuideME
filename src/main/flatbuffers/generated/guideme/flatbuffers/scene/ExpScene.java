// automatically generated by the FlatBuffers compiler, do not modify

package guideme.flatbuffers.scene;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@javax.annotation.processing.Generated(value = "flatc")
@SuppressWarnings("unused")
public final class ExpScene extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_23_5_26();
    }

    public static ExpScene getRootAsExpScene(ByteBuffer _bb) {
        return getRootAsExpScene(_bb, new ExpScene());
    }

    public static ExpScene getRootAsExpScene(ByteBuffer _bb, ExpScene obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public ExpScene __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public guideme.flatbuffers.scene.ExpCameraSettings camera() {
        return camera(new guideme.flatbuffers.scene.ExpCameraSettings());
    }

    public guideme.flatbuffers.scene.ExpCameraSettings camera(guideme.flatbuffers.scene.ExpCameraSettings obj) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(o + bb_pos, bb) : null;
    }

    public guideme.flatbuffers.scene.ExpMesh meshes(int j) {
        return meshes(new guideme.flatbuffers.scene.ExpMesh(), j);
    }

    public guideme.flatbuffers.scene.ExpMesh meshes(guideme.flatbuffers.scene.ExpMesh obj, int j) {
        int o = __offset(6);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int meshesLength() {
        int o = __offset(6);
        return o != 0 ? __vector_len(o) : 0;
    }

    public guideme.flatbuffers.scene.ExpMesh.Vector meshesVector() {
        return meshesVector(new guideme.flatbuffers.scene.ExpMesh.Vector());
    }

    public guideme.flatbuffers.scene.ExpMesh.Vector meshesVector(guideme.flatbuffers.scene.ExpMesh.Vector obj) {
        int o = __offset(6);
        return o != 0 ? obj.__assign(__vector(o), 4, bb) : null;
    }

    public guideme.flatbuffers.scene.ExpAnimatedTexturePart animatedTextures(int j) {
        return animatedTextures(new guideme.flatbuffers.scene.ExpAnimatedTexturePart(), j);
    }

    public guideme.flatbuffers.scene.ExpAnimatedTexturePart animatedTextures(
            guideme.flatbuffers.scene.ExpAnimatedTexturePart obj, int j) {
        int o = __offset(8);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int animatedTexturesLength() {
        int o = __offset(8);
        return o != 0 ? __vector_len(o) : 0;
    }

    public guideme.flatbuffers.scene.ExpAnimatedTexturePart.Vector animatedTexturesVector() {
        return animatedTexturesVector(new guideme.flatbuffers.scene.ExpAnimatedTexturePart.Vector());
    }

    public guideme.flatbuffers.scene.ExpAnimatedTexturePart.Vector animatedTexturesVector(
            guideme.flatbuffers.scene.ExpAnimatedTexturePart.Vector obj) {
        int o = __offset(8);
        return o != 0 ? obj.__assign(__vector(o), 4, bb) : null;
    }

    public static void startExpScene(FlatBufferBuilder builder) {
        builder.startTable(3);
    }

    public static void addCamera(FlatBufferBuilder builder, int cameraOffset) {
        builder.addStruct(0, cameraOffset, 0);
    }

    public static void addMeshes(FlatBufferBuilder builder, int meshesOffset) {
        builder.addOffset(1, meshesOffset, 0);
    }

    public static int createMeshesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--)
            builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startMeshesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addAnimatedTextures(FlatBufferBuilder builder, int animatedTexturesOffset) {
        builder.addOffset(2, animatedTexturesOffset, 0);
    }

    public static int createAnimatedTexturesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--)
            builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startAnimatedTexturesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endExpScene(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static void finishExpSceneBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public static void finishSizePrefixedExpSceneBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public ExpScene get(int j) {
            return get(new ExpScene(), j);
        }

        public ExpScene get(ExpScene obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }
}
